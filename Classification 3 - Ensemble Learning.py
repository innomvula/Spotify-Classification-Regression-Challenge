{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Classification Problem\n",
    "\n",
    "#### Create a model for predicting the genre of a song."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import sklearn\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.pyplot import figure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.read_csv(\"Train.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(453, 15)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Id', 'title', 'artist', 'year', 'bpm', 'nrgy', 'dnce', 'dB', 'live',\n",
       "       'val', 'dur', 'acous', 'spch', 'pop', 'top genre'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Id            0\n",
       "title         0\n",
       "artist        0\n",
       "year          0\n",
       "bpm           0\n",
       "nrgy          0\n",
       "dnce          0\n",
       "dB            0\n",
       "live          0\n",
       "val           0\n",
       "dur           0\n",
       "acous         0\n",
       "spch          0\n",
       "pop           0\n",
       "top genre    15\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_c=train.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Id           0\n",
       "title        0\n",
       "artist       0\n",
       "year         0\n",
       "bpm          0\n",
       "nrgy         0\n",
       "dnce         0\n",
       "dB           0\n",
       "live         0\n",
       "val          0\n",
       "dur          0\n",
       "acous        0\n",
       "spch         0\n",
       "pop          0\n",
       "top genre    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_c.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_c = train_c.drop(['title', 'artist'],  axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x2160 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_c['top genre'].value_counts().sort_values().plot.barh()\n",
    "plt.title('Songs by Top Genre')\n",
    "plt.xlabel('Genre')\n",
    "plt.ylabel('Frequency')\n",
    "plt.gcf().set_size_inches(10, 30)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Id', 'year', 'bpm', 'nrgy', 'dnce', 'dB', 'live', 'val', 'dur',\n",
       "       'acous', 'spch', 'pop', 'top genre'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_c.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "corr = train_c.iloc[:, :12].corr()\n",
    "figure(figsize=(15,15))\n",
    "ax = sns.heatmap(corr, annot = True, vmin=-1, vmax=1, center= 0, cmap= 'hsv')\n",
    "bottom, top = ax.get_ylim()\n",
    "ax.set_ylim(bottom + 0.5, top - 0.5)\n",
    "plt.title('Correlation Table')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train/Test Split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import datasets\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>year</th>\n",
       "      <th>bpm</th>\n",
       "      <th>nrgy</th>\n",
       "      <th>dnce</th>\n",
       "      <th>dB</th>\n",
       "      <th>live</th>\n",
       "      <th>val</th>\n",
       "      <th>dur</th>\n",
       "      <th>acous</th>\n",
       "      <th>spch</th>\n",
       "      <th>pop</th>\n",
       "      <th>top genre</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1996</td>\n",
       "      <td>107</td>\n",
       "      <td>31</td>\n",
       "      <td>45</td>\n",
       "      <td>-8</td>\n",
       "      <td>13</td>\n",
       "      <td>28</td>\n",
       "      <td>150</td>\n",
       "      <td>75</td>\n",
       "      <td>3</td>\n",
       "      <td>44</td>\n",
       "      <td>adult standards</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1979</td>\n",
       "      <td>105</td>\n",
       "      <td>36</td>\n",
       "      <td>63</td>\n",
       "      <td>-9</td>\n",
       "      <td>13</td>\n",
       "      <td>67</td>\n",
       "      <td>245</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>77</td>\n",
       "      <td>adult standards</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  year  bpm  nrgy  dnce  dB  live  val  dur  acous  spch  pop  \\\n",
       "0   1  1996  107    31    45  -8    13   28  150     75     3   44   \n",
       "2   3  1979  105    36    63  -9    13   67  245     11     3   77   \n",
       "\n",
       "         top genre  \n",
       "0  adult standards  \n",
       "2  adult standards  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_c.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Id', 'year', 'bpm', 'nrgy', 'dnce', 'dB', 'live', 'val', 'dur',\n",
       "       'acous', 'spch', 'pop', 'top genre'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_c.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Id            int64\n",
       "year          int64\n",
       "bpm           int64\n",
       "nrgy          int64\n",
       "dnce          int64\n",
       "dB            int64\n",
       "live          int64\n",
       "val           int64\n",
       "dur           int64\n",
       "acous         int64\n",
       "spch          int64\n",
       "pop           int64\n",
       "top genre    object\n",
       "dtype: object"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_c.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = train_c[['year', 'bpm', 'nrgy', 'dnce', 'dB', 'live', 'val', 'dur',\n",
    "       'acous', 'spch', 'pop']], train_c['top genre']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(350, 11)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(88, 11)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classifiers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import precision_score, recall_score\n",
    "from sklearn.metrics import precision_recall_fscore_support as prfs\n",
    "from sklearn.metrics import classification_report as cr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 0.19318181818181818\n",
      "2 0.3181818181818182\n",
      "3 0.3068181818181818\n",
      "4 0.29545454545454547\n",
      "5 0.3181818181818182\n",
      "6 0.2840909090909091\n",
      "7 0.23863636363636365\n",
      "8 0.26136363636363635\n",
      "9 0.20454545454545456\n",
      "10 0.2159090909090909\n",
      "11 0.18181818181818182\n",
      "12 0.18181818181818182\n",
      "13 0.20454545454545456\n",
      "14 0.2159090909090909\n",
      "15 0.18181818181818182\n",
      "16 0.19318181818181818\n",
      "17 0.22727272727272727\n",
      "18 0.17045454545454544\n",
      "19 0.20454545454545456\n",
      "20 0.18181818181818182\n",
      "21 0.22727272727272727\n",
      "22 0.20454545454545456\n",
      "23 0.22727272727272727\n",
      "24 0.17045454545454544\n",
      "25 0.22727272727272727\n",
      "26 0.23863636363636365\n",
      "27 0.1590909090909091\n",
      "28 0.19318181818181818\n",
      "29 0.20454545454545456\n",
      "30 0.19318181818181818\n",
      "31 0.20454545454545456\n",
      "32 0.20454545454545456\n",
      "33 0.2159090909090909\n",
      "34 0.17045454545454544\n",
      "35 0.17045454545454544\n",
      "36 0.20454545454545456\n",
      "37 0.22727272727272727\n",
      "38 0.2159090909090909\n",
      "39 0.20454545454545456\n",
      "40 0.20454545454545456\n",
      "41 0.18181818181818182\n",
      "42 0.20454545454545456\n",
      "43 0.20454545454545456\n",
      "44 0.19318181818181818\n",
      "45 0.17045454545454544\n",
      "46 0.19318181818181818\n",
      "47 0.19318181818181818\n",
      "48 0.20454545454545456\n",
      "49 0.18181818181818182\n",
      "50 0.20454545454545456\n",
      "51 0.19318181818181818\n",
      "52 0.2159090909090909\n",
      "53 0.19318181818181818\n",
      "54 0.22727272727272727\n",
      "55 0.19318181818181818\n",
      "56 0.20454545454545456\n",
      "57 0.20454545454545456\n",
      "58 0.17045454545454544\n",
      "59 0.18181818181818182\n"
     ]
    }
   ],
   "source": [
    "for a in range(1, 60):\n",
    "    tree_clf = DecisionTreeClassifier(max_depth=a, criterion=\"entropy\")\n",
    "    tree_clf.fit(X_train, y_train)\n",
    "    y_pred = tree_clf.predict(X_test)\n",
    "    print(a, accuracy_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DecisionTreeClassifier 0.3181818181818182\n",
      "DecisionTreeClassifier                       precision    recall  f1-score   support\n",
      "\n",
      "     adult standards       0.39      0.44      0.41        16\n",
      "          album rock       0.29      0.70      0.41        10\n",
      "    alternative rock       0.00      0.00      0.00         1\n",
      "             art pop       0.00      0.00      0.00         0\n",
      "            art rock       0.00      0.00      0.00         3\n",
      "         atl hip hop       0.00      0.00      0.00         2\n",
      "     australian rock       0.00      0.00      0.00         0\n",
      "    avant-garde jazz       0.00      0.00      0.00         1\n",
      "       barbadian pop       0.00      0.00      0.00         1\n",
      "               bebop       0.00      0.00      0.00         2\n",
      "         belgian pop       0.00      0.00      0.00         1\n",
      "               blues       0.00      0.00      0.00         1\n",
      "            boy band       0.00      0.00      0.00         3\n",
      "  brill building pop       0.33      0.33      0.33         3\n",
      "    british invasion       0.00      0.00      0.00         1\n",
      "        british soul       0.00      0.00      0.00         1\n",
      "        canadian pop       0.00      0.00      0.00         1\n",
      "         celtic rock       0.00      0.00      0.00         1\n",
      "         chicago rap       0.00      0.00      0.00         1\n",
      "        chicago soul       0.00      0.00      0.00         1\n",
      "        classic rock       0.00      0.00      0.00         1\n",
      "        classic soul       0.00      0.00      0.00         1\n",
      "             country       0.00      0.00      0.00         1\n",
      "           dance pop       0.36      0.92      0.52        13\n",
      "          dance rock       0.00      0.00      0.00         3\n",
      "deep adult standards       0.00      0.00      0.00         1\n",
      "               disco       0.00      0.00      0.00         1\n",
      "         disco house       0.00      0.00      0.00         1\n",
      "  east coast hip hop       0.00      0.00      0.00         1\n",
      "           eurodance       0.00      0.00      0.00         1\n",
      "             europop       0.00      0.00      0.00         3\n",
      "              g funk       0.00      0.00      0.00         2\n",
      "           glam rock       0.33      0.17      0.22         6\n",
      "                 pop       0.00      0.00      0.00         1\n",
      "           soft rock       0.00      0.00      0.00         1\n",
      "            yodeling       0.00      0.00      0.00         1\n",
      "\n",
      "           micro avg       0.32      0.32      0.32        88\n",
      "           macro avg       0.05      0.07      0.05        88\n",
      "        weighted avg       0.19      0.32      0.23        88\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1143: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1145: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples.\n",
      "  'recall', 'true', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "tree_clf = DecisionTreeClassifier(max_depth=5, criterion=\"entropy\")\n",
    "tree_clf.fit(X_train, y_train)\n",
    "y_pred1 = tree_clf.predict(X_test)\n",
    "print(tree_clf.__class__.__name__, accuracy_score(y_test, y_pred1))\n",
    "print(tree_clf.__class__.__name__, cr(y_test, y_pred1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.svm import SVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:196: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVC 0.125\n",
      "SVC                       precision    recall  f1-score   support\n",
      "\n",
      "     adult standards       1.00      0.06      0.12        16\n",
      "          album rock       0.11      1.00      0.21        10\n",
      "    alternative rock       0.00      0.00      0.00         1\n",
      "            art rock       0.00      0.00      0.00         3\n",
      "         atl hip hop       0.00      0.00      0.00         2\n",
      "    avant-garde jazz       0.00      0.00      0.00         1\n",
      "       barbadian pop       0.00      0.00      0.00         1\n",
      "               bebop       0.00      0.00      0.00         2\n",
      "         belgian pop       0.00      0.00      0.00         1\n",
      "               blues       0.00      0.00      0.00         1\n",
      "            boy band       0.00      0.00      0.00         3\n",
      "  brill building pop       0.00      0.00      0.00         3\n",
      "    british invasion       0.00      0.00      0.00         1\n",
      "        british soul       0.00      0.00      0.00         1\n",
      "        canadian pop       0.00      0.00      0.00         1\n",
      "         celtic rock       0.00      0.00      0.00         1\n",
      "         chicago rap       0.00      0.00      0.00         1\n",
      "        chicago soul       0.00      0.00      0.00         1\n",
      "        classic rock       0.00      0.00      0.00         1\n",
      "        classic soul       0.00      0.00      0.00         1\n",
      "             country       0.00      0.00      0.00         1\n",
      "           dance pop       0.00      0.00      0.00        13\n",
      "          dance rock       0.00      0.00      0.00         3\n",
      "deep adult standards       0.00      0.00      0.00         1\n",
      "               disco       0.00      0.00      0.00         1\n",
      "         disco house       0.00      0.00      0.00         1\n",
      "  east coast hip hop       0.00      0.00      0.00         1\n",
      "           eurodance       0.00      0.00      0.00         1\n",
      "             europop       0.00      0.00      0.00         3\n",
      "              g funk       0.00      0.00      0.00         2\n",
      "           glam rock       0.00      0.00      0.00         6\n",
      "                 pop       0.00      0.00      0.00         1\n",
      "           soft rock       0.00      0.00      0.00         1\n",
      "            yodeling       0.00      0.00      0.00         1\n",
      "\n",
      "           micro avg       0.12      0.12      0.12        88\n",
      "           macro avg       0.03      0.03      0.01        88\n",
      "        weighted avg       0.19      0.12      0.04        88\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1143: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "svm_clf = SVC(decision_function_shape='ovo', probability=True)\n",
    "svm_clf.fit(X_train, y_train)\n",
    "y_pred2 = svm_clf.predict(X_test)\n",
    "print(svm_clf.__class__.__name__, accuracy_score(y_test, y_pred2))\n",
    "print(svm_clf.__class__.__name__, cr(y_test, y_pred2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RandomForestClassifier 0.36363636363636365\n",
      "RandomForestClassifier                       precision    recall  f1-score   support\n",
      "\n",
      "     adult standards       0.41      0.69      0.51        16\n",
      "          album rock       0.33      0.90      0.49        10\n",
      "    alternative rock       0.00      0.00      0.00         1\n",
      "            art rock       0.00      0.00      0.00         3\n",
      "         atl hip hop       0.00      0.00      0.00         2\n",
      "    avant-garde jazz       0.00      0.00      0.00         1\n",
      "       barbadian pop       0.00      0.00      0.00         1\n",
      "               bebop       0.00      0.00      0.00         2\n",
      "         belgian pop       0.00      0.00      0.00         1\n",
      "               blues       0.00      0.00      0.00         1\n",
      "            boy band       0.00      0.00      0.00         3\n",
      "  brill building pop       0.00      0.00      0.00         3\n",
      "    british invasion       0.00      0.00      0.00         1\n",
      "        british soul       0.00      0.00      0.00         1\n",
      "        canadian pop       0.00      0.00      0.00         1\n",
      "         celtic rock       0.00      0.00      0.00         1\n",
      "         chicago rap       0.00      0.00      0.00         1\n",
      "        chicago soul       0.00      0.00      0.00         1\n",
      "        classic rock       0.00      0.00      0.00         1\n",
      "        classic soul       0.00      0.00      0.00         1\n",
      "             country       0.00      0.00      0.00         1\n",
      "           dance pop       0.35      0.92      0.51        13\n",
      "          dance rock       0.00      0.00      0.00         3\n",
      "deep adult standards       0.00      0.00      0.00         1\n",
      "               disco       0.00      0.00      0.00         1\n",
      "         disco house       0.00      0.00      0.00         1\n",
      "  east coast hip hop       0.00      0.00      0.00         1\n",
      "           eurodance       0.00      0.00      0.00         1\n",
      "             europop       0.00      0.00      0.00         3\n",
      "              g funk       0.00      0.00      0.00         2\n",
      "           glam rock       0.00      0.00      0.00         6\n",
      "                 pop       0.00      0.00      0.00         1\n",
      "           soft rock       0.00      0.00      0.00         1\n",
      "            yodeling       0.00      0.00      0.00         1\n",
      "\n",
      "           micro avg       0.36      0.36      0.36        88\n",
      "           macro avg       0.03      0.07      0.04        88\n",
      "        weighted avg       0.16      0.36      0.22        88\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1143: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "rnd_clf = RandomForestClassifier(max_depth=2, random_state=0, n_estimators=200, criterion=\"gini\")\n",
    "rnd_clf.fit(X_train, y_train)\n",
    "y_pred3 = rnd_clf.predict(X_test)\n",
    "print(rnd_clf.__class__.__name__, accuracy_score(y_test, y_pred3))\n",
    "print(rnd_clf.__class__.__name__, cr(y_test, y_pred3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:459: FutureWarning: Default multi_class will be changed to 'auto' in 0.22. Specify the multi_class option to silence this warning.\n",
      "  \"this warning.\", FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LogisticRegression 0.23863636363636365\n",
      "LogisticRegression                          precision    recall  f1-score   support\n",
      "\n",
      "        adult standards       0.52      0.69      0.59        16\n",
      "                afropop       0.00      0.00      0.00         0\n",
      "             album rock       0.12      0.30      0.18        10\n",
      "       alternative rock       0.00      0.00      0.00         1\n",
      "  american folk revival       0.00      0.00      0.00         0\n",
      "               art rock       0.00      0.00      0.00         3\n",
      "            atl hip hop       0.00      0.00      0.00         2\n",
      "       avant-garde jazz       0.00      0.00      0.00         1\n",
      "          barbadian pop       0.00      0.00      0.00         1\n",
      "                  bebop       0.00      0.00      0.00         2\n",
      "          belgian dance       0.00      0.00      0.00         0\n",
      "            belgian pop       0.00      0.00      0.00         1\n",
      "                  blues       0.00      0.00      0.00         1\n",
      "               boy band       0.00      0.00      0.00         3\n",
      "     brill building pop       0.00      0.00      0.00         3\n",
      "              brit funk       0.00      0.00      0.00         0\n",
      "       british invasion       0.00      0.00      0.00         1\n",
      "           british soul       0.00      0.00      0.00         1\n",
      "        bubblegum dance       0.00      0.00      0.00         0\n",
      "          canadian folk       0.00      0.00      0.00         0\n",
      "           canadian pop       0.00      0.00      0.00         1\n",
      "            celtic rock       0.00      0.00      0.00         1\n",
      "            chicago rap       0.00      0.00      0.00         1\n",
      "           chicago soul       0.00      0.00      0.00         1\n",
      "     classic danish pop       0.00      0.00      0.00         0\n",
      "     classic girl group       0.00      0.00      0.00         0\n",
      "           classic rock       0.00      0.00      0.00         1\n",
      "           classic soul       0.00      0.00      0.00         1\n",
      "                country       0.00      0.00      0.00         1\n",
      "              dance pop       0.43      0.46      0.44        13\n",
      "             dance rock       0.00      0.00      0.00         3\n",
      "   deep adult standards       0.00      0.00      0.00         1\n",
      "                  disco       0.00      0.00      0.00         1\n",
      "            disco house       0.00      0.00      0.00         1\n",
      "     east coast hip hop       0.33      1.00      0.50         1\n",
      "              eurodance       0.00      0.00      0.00         1\n",
      "                europop       0.00      0.00      0.00         3\n",
      "                 g funk       0.00      0.00      0.00         2\n",
      "german alternative rock       0.00      0.00      0.00         0\n",
      "              glam rock       0.00      0.00      0.00         6\n",
      "            mellow gold       0.00      0.00      0.00         0\n",
      "                    pop       0.00      0.00      0.00         1\n",
      "              soft rock       0.00      0.00      0.00         1\n",
      "               yodeling       0.00      0.00      0.00         1\n",
      "\n",
      "              micro avg       0.24      0.24      0.24        88\n",
      "              macro avg       0.03      0.06      0.04        88\n",
      "           weighted avg       0.18      0.24      0.20        88\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1143: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1145: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples.\n",
      "  'recall', 'true', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "log_clf = LogisticRegression(penalty = \"l2\", class_weight = None)\n",
    "log_clf.fit(X_train, y_train)\n",
    "y_pred4 = log_clf.predict(X_test)\n",
    "print(log_clf.__class__.__name__, accuracy_score(y_test, y_pred4))\n",
    "print(log_clf.__class__.__name__, cr(y_test, y_pred4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Multi-Layer Perceptron"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neural_network import MLPClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MLPClassifier 0.26136363636363635\n",
      "MLPClassifier                       precision    recall  f1-score   support\n",
      "\n",
      "     adult standards       0.41      0.69      0.51        16\n",
      "          album rock       0.18      0.70      0.29        10\n",
      "    alternative rock       0.00      0.00      0.00         1\n",
      "            art rock       0.00      0.00      0.00         3\n",
      "         atl hip hop       0.00      0.00      0.00         2\n",
      "    avant-garde jazz       0.00      0.00      0.00         1\n",
      "       barbadian pop       0.00      0.00      0.00         1\n",
      "               bebop       0.00      0.00      0.00         2\n",
      "         belgian pop       0.00      0.00      0.00         1\n",
      "               blues       0.00      0.00      0.00         1\n",
      "            boy band       0.00      0.00      0.00         3\n",
      "  brill building pop       0.00      0.00      0.00         3\n",
      "    british invasion       0.00      0.00      0.00         1\n",
      "        british soul       0.00      0.00      0.00         1\n",
      "        canadian pop       0.00      0.00      0.00         1\n",
      "         celtic rock       0.00      0.00      0.00         1\n",
      "         chicago rap       0.00      0.00      0.00         1\n",
      "        chicago soul       0.00      0.00      0.00         1\n",
      "        classic rock       0.00      0.00      0.00         1\n",
      "        classic soul       0.00      0.00      0.00         1\n",
      "             country       0.00      0.00      0.00         1\n",
      "           dance pop       0.23      0.38      0.29        13\n",
      "          dance rock       0.00      0.00      0.00         3\n",
      "deep adult standards       0.00      0.00      0.00         1\n",
      "               disco       0.00      0.00      0.00         1\n",
      "         disco house       0.00      0.00      0.00         1\n",
      "  east coast hip hop       0.00      0.00      0.00         1\n",
      "           eurodance       0.00      0.00      0.00         1\n",
      "             europop       0.00      0.00      0.00         3\n",
      "              g funk       0.00      0.00      0.00         2\n",
      "           glam rock       0.00      0.00      0.00         6\n",
      "                 pop       0.00      0.00      0.00         1\n",
      "           soft rock       0.00      0.00      0.00         1\n",
      "            yodeling       0.00      0.00      0.00         1\n",
      "\n",
      "           micro avg       0.26      0.26      0.26        88\n",
      "           macro avg       0.02      0.05      0.03        88\n",
      "        weighted avg       0.13      0.26      0.17        88\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\neural_network\\multilayer_perceptron.py:562: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n",
      "  % self.max_iter, ConvergenceWarning)\n",
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1143: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "mlp_clf = MLPClassifier(activation = \"tanh\", learning_rate = \"adaptive\")\n",
    "mlp_clf.fit(X_train, y_train)\n",
    "y_pred5 = mlp_clf.predict(X_test)\n",
    "print(mlp_clf.__class__.__name__, accuracy_score(y_test, y_pred5))\n",
    "print(mlp_clf.__class__.__name__, cr(y_test, y_pred5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### K-Nearest-Neighbours"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNeighborsClassifier 0.32954545454545453\n",
      "KNeighborsClassifier                       precision    recall  f1-score   support\n",
      "\n",
      "     adult standards       0.44      0.69      0.54        16\n",
      "          album rock       0.22      0.80      0.35        10\n",
      "    alternative rock       0.00      0.00      0.00         1\n",
      "            art rock       0.00      0.00      0.00         3\n",
      "         atl hip hop       1.00      0.50      0.67         2\n",
      "    avant-garde jazz       0.00      0.00      0.00         1\n",
      "       barbadian pop       0.00      0.00      0.00         1\n",
      "               bebop       0.00      0.00      0.00         2\n",
      "         belgian pop       0.00      0.00      0.00         1\n",
      "               blues       0.00      0.00      0.00         1\n",
      "            boy band       0.00      0.00      0.00         3\n",
      "  brill building pop       0.00      0.00      0.00         3\n",
      "    british invasion       0.00      0.00      0.00         1\n",
      "        british soul       0.00      0.00      0.00         1\n",
      "     bubblegum dance       0.00      0.00      0.00         0\n",
      "        canadian pop       0.00      0.00      0.00         1\n",
      "         celtic rock       0.00      0.00      0.00         1\n",
      "         chicago rap       0.00      0.00      0.00         1\n",
      "        chicago soul       0.00      0.00      0.00         1\n",
      "        classic rock       0.00      0.00      0.00         1\n",
      "        classic soul       0.00      0.00      0.00         1\n",
      "             country       0.00      0.00      0.00         1\n",
      "           dance pop       0.50      0.62      0.55        13\n",
      "          dance rock       0.00      0.00      0.00         3\n",
      "deep adult standards       0.00      0.00      0.00         1\n",
      "               disco       1.00      1.00      1.00         1\n",
      "         disco house       0.00      0.00      0.00         1\n",
      "  east coast hip hop       0.00      0.00      0.00         1\n",
      "           eurodance       0.00      0.00      0.00         1\n",
      "             europop       0.00      0.00      0.00         3\n",
      "              g funk       0.00      0.00      0.00         2\n",
      "           glam rock       0.00      0.00      0.00         6\n",
      "                 pop       0.00      0.00      0.00         1\n",
      "           soft rock       0.00      0.00      0.00         1\n",
      "            yodeling       0.00      0.00      0.00         1\n",
      "\n",
      "           micro avg       0.33      0.33      0.33        88\n",
      "           macro avg       0.09      0.10      0.09        88\n",
      "        weighted avg       0.21      0.33      0.25        88\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1143: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1145: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples.\n",
      "  'recall', 'true', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "knn_clf = KNeighborsClassifier(n_neighbors = 11, algorithm = \"kd_tree\")\n",
    "knn_clf.fit(X_train, y_train)\n",
    "y_pred6 = knn_clf.predict(X_test)\n",
    "print(knn_clf.__class__.__name__, accuracy_score(y_test, y_pred6))\n",
    "print(knn_clf.__class__.__name__, cr(y_test, y_pred6))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Naive Bayes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import GaussianNB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1143: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1145: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples.\n",
      "  'recall', 'true', average, warn_for)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GaussianNB 0.17045454545454544\n",
      "GaussianNB                       precision    recall  f1-score   support\n",
      "\n",
      "     adult standards       0.31      0.31      0.31        16\n",
      "          album rock       0.14      0.20      0.17        10\n",
      "    alternative rock       0.00      0.00      0.00         1\n",
      "            art rock       0.00      0.00      0.00         3\n",
      "         atl hip hop       0.00      0.00      0.00         2\n",
      "    avant-garde jazz       0.00      0.00      0.00         1\n",
      "       barbadian pop       0.00      0.00      0.00         1\n",
      "               bebop       0.00      0.00      0.00         2\n",
      "         belgian pop       0.00      0.00      0.00         1\n",
      "               blues       0.00      0.00      0.00         1\n",
      "            boy band       0.00      0.00      0.00         3\n",
      "  brill building pop       0.33      0.33      0.33         3\n",
      "    british invasion       0.00      0.00      0.00         1\n",
      "        british soul       0.00      0.00      0.00         1\n",
      "     bubblegum dance       0.00      0.00      0.00         0\n",
      "        canadian pop       0.00      0.00      0.00         1\n",
      "         celtic rock       0.00      0.00      0.00         1\n",
      "         chicago rap       0.00      0.00      0.00         1\n",
      "        chicago soul       0.00      0.00      0.00         1\n",
      "        classic rock       0.00      0.00      0.00         1\n",
      "        classic soul       0.00      0.00      0.00         1\n",
      "             country       0.00      0.00      0.00         1\n",
      "           dance pop       0.38      0.38      0.38        13\n",
      "          dance rock       0.10      0.33      0.15         3\n",
      "deep adult standards       0.00      0.00      0.00         1\n",
      "               disco       0.00      0.00      0.00         1\n",
      "         disco house       0.00      0.00      0.00         1\n",
      "             doo-wop       0.00      0.00      0.00         0\n",
      "  east coast hip hop       0.25      1.00      0.40         1\n",
      "           eurodance       0.00      0.00      0.00         1\n",
      "             europop       0.00      0.00      0.00         3\n",
      "              g funk       0.00      0.00      0.00         2\n",
      "           glam rock       0.00      0.00      0.00         6\n",
      "                 pop       0.00      0.00      0.00         1\n",
      "           soft rock       0.00      0.00      0.00         1\n",
      "            yodeling       0.00      0.00      0.00         1\n",
      "\n",
      "           micro avg       0.17      0.17      0.17        88\n",
      "           macro avg       0.04      0.07      0.05        88\n",
      "        weighted avg       0.15      0.17      0.15        88\n",
      "\n"
     ]
    }
   ],
   "source": [
    "nvb_clf = GaussianNB()\n",
    "nvb_clf.fit(X_train, y_train)\n",
    "y_pred7 = nvb_clf.predict(X_test)\n",
    "print(nvb_clf.__class__.__name__, accuracy_score(y_test, y_pred7))\n",
    "print(nvb_clf.__class__.__name__, cr(y_test, y_pred7))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Ensemble"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import VotingClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:196: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:459: FutureWarning: Default multi_class will be changed to 'auto' in 0.22. Specify the multi_class option to silence this warning.\n",
      "  \"this warning.\", FutureWarning)\n",
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\neural_network\\multilayer_perceptron.py:562: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n",
      "  % self.max_iter, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "VotingClassifier 0.36363636363636365\n",
      "VotingClassifier                       precision    recall  f1-score   support\n",
      "\n",
      "     adult standards       0.48      0.69      0.56        16\n",
      "          album rock       0.26      1.00      0.42        10\n",
      "    alternative rock       0.00      0.00      0.00         1\n",
      "            art rock       0.00      0.00      0.00         3\n",
      "         atl hip hop       0.00      0.00      0.00         2\n",
      "    avant-garde jazz       0.00      0.00      0.00         1\n",
      "       barbadian pop       0.00      0.00      0.00         1\n",
      "               bebop       0.00      0.00      0.00         2\n",
      "         belgian pop       0.00      0.00      0.00         1\n",
      "               blues       0.00      0.00      0.00         1\n",
      "            boy band       0.00      0.00      0.00         3\n",
      "  brill building pop       0.00      0.00      0.00         3\n",
      "    british invasion       0.00      0.00      0.00         1\n",
      "        british soul       0.00      0.00      0.00         1\n",
      "     bubblegum dance       0.00      0.00      0.00         0\n",
      "        canadian pop       0.00      0.00      0.00         1\n",
      "         celtic rock       0.00      0.00      0.00         1\n",
      "         chicago rap       0.00      0.00      0.00         1\n",
      "        chicago soul       0.00      0.00      0.00         1\n",
      "        classic rock       0.00      0.00      0.00         1\n",
      "        classic soul       0.00      0.00      0.00         1\n",
      "             country       0.00      0.00      0.00         1\n",
      "           dance pop       0.42      0.85      0.56        13\n",
      "          dance rock       0.00      0.00      0.00         3\n",
      "deep adult standards       0.00      0.00      0.00         1\n",
      "               disco       0.00      0.00      0.00         1\n",
      "         disco house       0.00      0.00      0.00         1\n",
      "  east coast hip hop       0.00      0.00      0.00         1\n",
      "           eurodance       0.00      0.00      0.00         1\n",
      "             europop       0.00      0.00      0.00         3\n",
      "              g funk       0.00      0.00      0.00         2\n",
      "           glam rock       0.00      0.00      0.00         6\n",
      "                 pop       0.00      0.00      0.00         1\n",
      "           soft rock       0.00      0.00      0.00         1\n",
      "            yodeling       0.00      0.00      0.00         1\n",
      "\n",
      "           micro avg       0.36      0.36      0.36        88\n",
      "           macro avg       0.03      0.07      0.04        88\n",
      "        weighted avg       0.18      0.36      0.23        88\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1143: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1145: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples.\n",
      "  'recall', 'true', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "voting_clf = VotingClassifier(estimators=[(\"tree\", tree_clf), (\"supp\", svm_clf), (\"forest\", rnd_clf), (\"log\", log_clf), (\"percept\", mlp_clf), (\"neighbour\", knn_clf), (\"bayes\", nvb_clf)],voting='hard')\n",
    "voting_clf.fit(X_train, y_train)\n",
    "y_pred8 = voting_clf.predict(X_test)\n",
    "print(voting_clf.__class__.__name__, accuracy_score(y_test, y_pred8))\n",
    "print(voting_clf.__class__.__name__, cr(y_test, y_pred8))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:196: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:459: FutureWarning: Default multi_class will be changed to 'auto' in 0.22. Specify the multi_class option to silence this warning.\n",
      "  \"this warning.\", FutureWarning)\n",
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\neural_network\\multilayer_perceptron.py:562: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n",
      "  % self.max_iter, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "VotingClassifier 0.3409090909090909\n",
      "VotingClassifier                       precision    recall  f1-score   support\n",
      "\n",
      "     adult standards       0.41      0.56      0.47        16\n",
      "          album rock       0.25      0.80      0.38        10\n",
      "    alternative rock       0.00      0.00      0.00         1\n",
      "            art rock       0.00      0.00      0.00         3\n",
      "         atl hip hop       0.00      0.00      0.00         2\n",
      "    avant-garde jazz       0.00      0.00      0.00         1\n",
      "       barbadian pop       0.00      0.00      0.00         1\n",
      "               bebop       0.00      0.00      0.00         2\n",
      "         belgian pop       0.00      0.00      0.00         1\n",
      "               blues       0.00      0.00      0.00         1\n",
      "            boy band       0.00      0.00      0.00         3\n",
      "  brill building pop       0.33      0.33      0.33         3\n",
      "    british invasion       0.00      0.00      0.00         1\n",
      "        british soul       0.00      0.00      0.00         1\n",
      "     bubblegum dance       0.00      0.00      0.00         0\n",
      "        canadian pop       0.00      0.00      0.00         1\n",
      "         celtic rock       0.00      0.00      0.00         1\n",
      "         chicago rap       0.00      0.00      0.00         1\n",
      "        chicago soul       0.00      0.00      0.00         1\n",
      "        classic rock       0.00      0.00      0.00         1\n",
      "        classic soul       0.00      0.00      0.00         1\n",
      "             country       0.00      0.00      0.00         1\n",
      "           dance pop       0.42      0.85      0.56        13\n",
      "          dance rock       0.00      0.00      0.00         3\n",
      "deep adult standards       0.00      0.00      0.00         1\n",
      "               disco       0.00      0.00      0.00         1\n",
      "         disco house       0.00      0.00      0.00         1\n",
      "  east coast hip hop       1.00      1.00      1.00         1\n",
      "           eurodance       0.00      0.00      0.00         1\n",
      "             europop       0.00      0.00      0.00         3\n",
      "              g funk       0.00      0.00      0.00         2\n",
      "           glam rock       0.00      0.00      0.00         6\n",
      "                 pop       0.00      0.00      0.00         1\n",
      "           soft rock       0.00      0.00      0.00         1\n",
      "            yodeling       0.00      0.00      0.00         1\n",
      "\n",
      "           micro avg       0.34      0.34      0.34        88\n",
      "           macro avg       0.07      0.10      0.08        88\n",
      "        weighted avg       0.19      0.34      0.24        88\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1143: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1145: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples.\n",
      "  'recall', 'true', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "voting2_clf = VotingClassifier(estimators=[(\"tree\", tree_clf), (\"supp\", svm_clf), (\"forest\", rnd_clf), (\"log\", log_clf), (\"percept\", mlp_clf), (\"neighbour\", knn_clf), (\"bayes\", nvb_clf)]\n",
    "                              ,voting='soft')\n",
    "voting2_clf.fit(X_train, y_train)\n",
    "y_pred9 = voting2_clf.predict(X_test)\n",
    "print(voting2_clf.__class__.__name__, accuracy_score(y_test, y_pred9))\n",
    "print(voting2_clf.__class__.__name__, cr(y_test, y_pred9))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comparison Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1143: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "C:\\Users\\Tom\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1145: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples.\n",
      "  'recall', 'true', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "scores = []\n",
    "for a in [y_pred1, y_pred2, y_pred3, y_pred4, y_pred5, y_pred6, y_pred7, y_pred8, y_pred9]:\n",
    "    scores.append([accuracy_score(y_test, a), precision_score(y_test, a, average = \"macro\"), recall_score(y_test, a, average = \"macro\")])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Decision Tree</th>\n",
       "      <td>0.318182</td>\n",
       "      <td>0.047524</td>\n",
       "      <td>0.071127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Support Vector</th>\n",
       "      <td>0.125000</td>\n",
       "      <td>0.032792</td>\n",
       "      <td>0.031250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Random Forest</th>\n",
       "      <td>0.363636</td>\n",
       "      <td>0.032167</td>\n",
       "      <td>0.073840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Logistic Regression</th>\n",
       "      <td>0.238636</td>\n",
       "      <td>0.032062</td>\n",
       "      <td>0.055660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Perceptron</th>\n",
       "      <td>0.261364</td>\n",
       "      <td>0.023946</td>\n",
       "      <td>0.052121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>K-Nearest-Neighbours</th>\n",
       "      <td>0.329545</td>\n",
       "      <td>0.090349</td>\n",
       "      <td>0.102940</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Naïve Bayes</th>\n",
       "      <td>0.170455</td>\n",
       "      <td>0.042314</td>\n",
       "      <td>0.071216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hard Voting</th>\n",
       "      <td>0.363636</td>\n",
       "      <td>0.033271</td>\n",
       "      <td>0.072390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Soft Voting</th>\n",
       "      <td>0.340909</td>\n",
       "      <td>0.069014</td>\n",
       "      <td>0.101200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Accuracy  Precision    Recall\n",
       "Decision Tree         0.318182   0.047524  0.071127\n",
       "Support Vector        0.125000   0.032792  0.031250\n",
       "Random Forest         0.363636   0.032167  0.073840\n",
       "Logistic Regression   0.238636   0.032062  0.055660\n",
       "Perceptron            0.261364   0.023946  0.052121\n",
       "K-Nearest-Neighbours  0.329545   0.090349  0.102940\n",
       "Naïve Bayes           0.170455   0.042314  0.071216\n",
       "Hard Voting           0.363636   0.033271  0.072390\n",
       "Soft Voting           0.340909   0.069014  0.101200"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.DataFrame(scores, columns = [\"Accuracy\", \"Precision\", \"Recall\"])\n",
    "df.index = [\"Decision Tree\", \"Support Vector\", \"Random Forest\", \"Logistic Regression\", \n",
    "            \"Perceptron\", \"K-Nearest-Neighbours\", \"Naïve Bayes\", \"Hard Voting\", \"Soft Voting\"]\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Export Solutions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "test = pd.read_csv(\"Test.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(113, 14)"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true,
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Id        0\n",
       "title     0\n",
       "artist    0\n",
       "year      0\n",
       "bpm       0\n",
       "nrgy      0\n",
       "dnce      0\n",
       "dB        0\n",
       "live      0\n",
       "val       0\n",
       "dur       0\n",
       "acous     0\n",
       "spch      0\n",
       "pop       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [],
   "source": [
    "test = test.drop(['title', 'artist'],  axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Id        top genre\n",
      "0  454        dance pop\n",
      "1  455       album rock\n",
      "2  456  adult standards\n",
      "3  457        dance pop\n",
      "4  458  adult standards\n"
     ]
    }
   ],
   "source": [
    "for a in [voting_clf2]:\n",
    "    predictions = a.predict(test[['year', 'bpm', 'nrgy', 'dnce', 'dB', 'live', 'val', 'dur',\n",
    "       'acous', 'spch', 'pop']])\n",
    "    solution = test\n",
    "    solution[\"top genre\"] = predictions\n",
    "    solution = solution[[\"Id\", \"top genre\"]]\n",
    "    print(solution.head())\n",
    "    solution.to_csv(\"SOFT_VOTING\", index=False)"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
