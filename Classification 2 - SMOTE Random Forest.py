{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import libraries:\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "from sklearn.model_selection import cross_validate\n",
    "from sklearn import metrics  \n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from matplotlib.pylab import rcParams\n",
    "rcParams['figure.figsize'] = 12, 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Load Test and Training Data\n",
    "test_data = pd.read_csv('C:\\\\Users\\\\Inno Mvula\\\\Desktop\\\\MSc Quantitative Finance\\\\S2.CS985 - Machine Learning and Data Analytics\\\\Assignment\\\\cs98xspotifyclassification\\\\CS98XClassificationTest.csv')\n",
    "train_data = pd.read_csv('C:\\\\Users\\\\Inno Mvula\\\\Desktop\\\\MSc Quantitative Finance\\\\S2.CS985 - Machine Learning and Data Analytics\\\\Assignment\\\\cs98xspotifyclassification\\\\CS98XClassificationTrain.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 453 entries, 0 to 452\n",
      "Data columns (total 15 columns):\n",
      "Id           453 non-null int64\n",
      "title        453 non-null object\n",
      "artist       453 non-null object\n",
      "year         453 non-null int64\n",
      "bpm          453 non-null int64\n",
      "nrgy         453 non-null int64\n",
      "dnce         453 non-null int64\n",
      "dB           453 non-null int64\n",
      "live         453 non-null int64\n",
      "val          453 non-null int64\n",
      "dur          453 non-null int64\n",
      "acous        453 non-null int64\n",
      "spch         453 non-null int64\n",
      "pop          453 non-null int64\n",
      "top genre    438 non-null object\n",
      "dtypes: int64(12), object(3)\n",
      "memory usage: 53.2+ KB\n"
     ]
    }
   ],
   "source": [
    "#Obseravtion of Training Dataset\n",
    "train_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Id            0\n",
       "title         0\n",
       "artist        0\n",
       "year          0\n",
       "bpm           0\n",
       "nrgy          0\n",
       "dnce          0\n",
       "dB            0\n",
       "live          0\n",
       "val           0\n",
       "dur           0\n",
       "acous         0\n",
       "spch          0\n",
       "pop           0\n",
       "top genre    15\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 438 entries, 0 to 452\n",
      "Data columns (total 15 columns):\n",
      "Id           438 non-null int64\n",
      "title        438 non-null object\n",
      "artist       438 non-null object\n",
      "year         438 non-null int64\n",
      "bpm          438 non-null int64\n",
      "nrgy         438 non-null int64\n",
      "dnce         438 non-null int64\n",
      "dB           438 non-null int64\n",
      "live         438 non-null int64\n",
      "val          438 non-null int64\n",
      "dur          438 non-null int64\n",
      "acous        438 non-null int64\n",
      "spch         438 non-null int64\n",
      "pop          438 non-null int64\n",
      "top genre    438 non-null object\n",
      "dtypes: int64(12), object(3)\n",
      "memory usage: 54.8+ KB\n"
     ]
    }
   ],
   "source": [
    "#Drop rows where genre is missing. Only 15 were missing out of 453 so dropping 15 shouldn't have a huge effect on the dataset\n",
    "train_data = train_data.dropna()\n",
    "train_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>title</th>\n",
       "      <th>artist</th>\n",
       "      <th>year</th>\n",
       "      <th>bpm</th>\n",
       "      <th>nrgy</th>\n",
       "      <th>dnce</th>\n",
       "      <th>dB</th>\n",
       "      <th>live</th>\n",
       "      <th>val</th>\n",
       "      <th>dur</th>\n",
       "      <th>acous</th>\n",
       "      <th>spch</th>\n",
       "      <th>pop</th>\n",
       "      <th>top genre</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>My Happiness</td>\n",
       "      <td>Connie Francis</td>\n",
       "      <td>1996</td>\n",
       "      <td>107</td>\n",
       "      <td>31</td>\n",
       "      <td>45</td>\n",
       "      <td>-8</td>\n",
       "      <td>13</td>\n",
       "      <td>28</td>\n",
       "      <td>150</td>\n",
       "      <td>75</td>\n",
       "      <td>3</td>\n",
       "      <td>44</td>\n",
       "      <td>adult standards</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>How Deep Is Your Love</td>\n",
       "      <td>Bee Gees</td>\n",
       "      <td>1979</td>\n",
       "      <td>105</td>\n",
       "      <td>36</td>\n",
       "      <td>63</td>\n",
       "      <td>-9</td>\n",
       "      <td>13</td>\n",
       "      <td>67</td>\n",
       "      <td>245</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>77</td>\n",
       "      <td>adult standards</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>Woman in Love</td>\n",
       "      <td>Barbra Streisand</td>\n",
       "      <td>1980</td>\n",
       "      <td>170</td>\n",
       "      <td>28</td>\n",
       "      <td>47</td>\n",
       "      <td>-16</td>\n",
       "      <td>13</td>\n",
       "      <td>33</td>\n",
       "      <td>232</td>\n",
       "      <td>25</td>\n",
       "      <td>3</td>\n",
       "      <td>67</td>\n",
       "      <td>adult standards</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>Goodbye Yellow Brick Road - Remastered 2014</td>\n",
       "      <td>Elton John</td>\n",
       "      <td>1973</td>\n",
       "      <td>121</td>\n",
       "      <td>47</td>\n",
       "      <td>56</td>\n",
       "      <td>-8</td>\n",
       "      <td>15</td>\n",
       "      <td>40</td>\n",
       "      <td>193</td>\n",
       "      <td>45</td>\n",
       "      <td>3</td>\n",
       "      <td>63</td>\n",
       "      <td>glam rock</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>Grenade</td>\n",
       "      <td>Bruno Mars</td>\n",
       "      <td>2010</td>\n",
       "      <td>110</td>\n",
       "      <td>56</td>\n",
       "      <td>71</td>\n",
       "      <td>-7</td>\n",
       "      <td>12</td>\n",
       "      <td>23</td>\n",
       "      <td>223</td>\n",
       "      <td>15</td>\n",
       "      <td>6</td>\n",
       "      <td>74</td>\n",
       "      <td>pop</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id                                        title            artist  year  \\\n",
       "0   1                                 My Happiness    Connie Francis  1996   \n",
       "2   3                        How Deep Is Your Love          Bee Gees  1979   \n",
       "3   4                                Woman in Love  Barbra Streisand  1980   \n",
       "4   5  Goodbye Yellow Brick Road - Remastered 2014        Elton John  1973   \n",
       "5   6                                      Grenade        Bruno Mars  2010   \n",
       "\n",
       "   bpm  nrgy  dnce  dB  live  val  dur  acous  spch  pop        top genre  \n",
       "0  107    31    45  -8    13   28  150     75     3   44  adult standards  \n",
       "2  105    36    63  -9    13   67  245     11     3   77  adult standards  \n",
       "3  170    28    47 -16    13   33  232     25     3   67  adult standards  \n",
       "4  121    47    56  -8    15   40  193     45     3   63        glam rock  \n",
       "5  110    56    71  -7    12   23  223     15     6   74              pop  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "adult standards       68\n",
       "album rock            66\n",
       "dance pop             61\n",
       "glam rock             16\n",
       "brill building pop    16\n",
       "                      ..\n",
       "britpop                1\n",
       "italian pop            1\n",
       "classic danish pop     1\n",
       "rock-and-roll          1\n",
       "german dance           1\n",
       "Name: top genre, Length: 86, dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Obseravtion of the distribution of genres\n",
    "train_data['top genre'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    0\n",
      "2    0\n",
      "3    0\n",
      "4    1\n",
      "5    2\n",
      "Name: top genre, dtype: int64\n",
      "Index(['adult standards', 'glam rock', 'pop', 'album rock', 'boy band',\n",
      "       'brill building pop', 'rock-and-roll', 'country rock', 'canadian pop',\n",
      "       'dance pop', 'europop', 'bebop', 'art rock', 'disco', 'blues',\n",
      "       'barbadian pop', 'deep adult standards', 'deep house', 'atl hip hop',\n",
      "       'dance rock', 'disco house', 'bubblegum dance', 'classic soul',\n",
      "       'classic uk pop', 'east coast hip hop', 'doo-wop', 'britpop',\n",
      "       'british blues', 'soft rock', 'australian talent show', 'art pop',\n",
      "       'british soul', 'british invasion', 'belgian pop', 'big room',\n",
      "       'german dance', 'italian pop', 'british folk', 'brit funk',\n",
      "       'chicago soul', 'neo mellow', 'british comedy', 'hip hop',\n",
      "       'new wave pop', 'eurodance', 'detroit hip hop', 'classic rock',\n",
      "       'uk garage', 'afrobeat', 'r&b', 'chicago rap', 'classic danish pop',\n",
      "       'british dance band', 'drone folk', 'permanent wave', 'merseybeat',\n",
      "       'g funk', 'blues rock', 'celtic rock', 'bow pop', 'australian rock',\n",
      "       'boogaloo', 'alternative metal', 'belgian dance', 'glam metal', 'latin',\n",
      "       'baroque pop', 'bubble trance', 'canadian folk',\n",
      "       'american folk revival', 'country', 'chanson', 'bubblegum pop',\n",
      "       'classic girl group', 'yodeling', 'afropop', 'hi-nrg',\n",
      "       'louisiana blues', 'hip pop', 'mellow gold', 'avant-garde jazz',\n",
      "       'bronx hip hop', 'glam punk', 'german alternative rock',\n",
      "       'acoustic blues', 'alternative rock'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "#Creating the dependent variable class and encoding\n",
    "factor = pd.factorize(train_data['top genre'])\n",
    "train_data['top genre'] = factor[0]\n",
    "definitions = factor[1]\n",
    "print(train_data['top genre'].head())\n",
    "print(definitions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>title</th>\n",
       "      <th>artist</th>\n",
       "      <th>year</th>\n",
       "      <th>bpm</th>\n",
       "      <th>nrgy</th>\n",
       "      <th>dnce</th>\n",
       "      <th>dB</th>\n",
       "      <th>live</th>\n",
       "      <th>val</th>\n",
       "      <th>dur</th>\n",
       "      <th>acous</th>\n",
       "      <th>spch</th>\n",
       "      <th>pop</th>\n",
       "      <th>top genre</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>My Happiness</td>\n",
       "      <td>Connie Francis</td>\n",
       "      <td>1996</td>\n",
       "      <td>107</td>\n",
       "      <td>31</td>\n",
       "      <td>45</td>\n",
       "      <td>-8</td>\n",
       "      <td>13</td>\n",
       "      <td>28</td>\n",
       "      <td>150</td>\n",
       "      <td>75</td>\n",
       "      <td>3</td>\n",
       "      <td>44</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>How Deep Is Your Love</td>\n",
       "      <td>Bee Gees</td>\n",
       "      <td>1979</td>\n",
       "      <td>105</td>\n",
       "      <td>36</td>\n",
       "      <td>63</td>\n",
       "      <td>-9</td>\n",
       "      <td>13</td>\n",
       "      <td>67</td>\n",
       "      <td>245</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>Woman in Love</td>\n",
       "      <td>Barbra Streisand</td>\n",
       "      <td>1980</td>\n",
       "      <td>170</td>\n",
       "      <td>28</td>\n",
       "      <td>47</td>\n",
       "      <td>-16</td>\n",
       "      <td>13</td>\n",
       "      <td>33</td>\n",
       "      <td>232</td>\n",
       "      <td>25</td>\n",
       "      <td>3</td>\n",
       "      <td>67</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>Goodbye Yellow Brick Road - Remastered 2014</td>\n",
       "      <td>Elton John</td>\n",
       "      <td>1973</td>\n",
       "      <td>121</td>\n",
       "      <td>47</td>\n",
       "      <td>56</td>\n",
       "      <td>-8</td>\n",
       "      <td>15</td>\n",
       "      <td>40</td>\n",
       "      <td>193</td>\n",
       "      <td>45</td>\n",
       "      <td>3</td>\n",
       "      <td>63</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>Grenade</td>\n",
       "      <td>Bruno Mars</td>\n",
       "      <td>2010</td>\n",
       "      <td>110</td>\n",
       "      <td>56</td>\n",
       "      <td>71</td>\n",
       "      <td>-7</td>\n",
       "      <td>12</td>\n",
       "      <td>23</td>\n",
       "      <td>223</td>\n",
       "      <td>15</td>\n",
       "      <td>6</td>\n",
       "      <td>74</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id                                        title            artist  year  \\\n",
       "0   1                                 My Happiness    Connie Francis  1996   \n",
       "2   3                        How Deep Is Your Love          Bee Gees  1979   \n",
       "3   4                                Woman in Love  Barbra Streisand  1980   \n",
       "4   5  Goodbye Yellow Brick Road - Remastered 2014        Elton John  1973   \n",
       "5   6                                      Grenade        Bruno Mars  2010   \n",
       "\n",
       "   bpm  nrgy  dnce  dB  live  val  dur  acous  spch  pop  top genre  \n",
       "0  107    31    45  -8    13   28  150     75     3   44          0  \n",
       "2  105    36    63  -9    13   67  245     11     3   77          0  \n",
       "3  170    28    47 -16    13   33  232     25     3   67          0  \n",
       "4  121    47    56  -8    15   40  193     45     3   63          1  \n",
       "5  110    56    71  -7    12   23  223     15     6   74          2  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     68\n",
       "3     66\n",
       "9     61\n",
       "1     16\n",
       "5     16\n",
       "      ..\n",
       "61     1\n",
       "27     1\n",
       "26     1\n",
       "47     1\n",
       "85     1\n",
       "Name: top genre, Length: 86, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data['top genre'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     68\n",
       "3     66\n",
       "9     61\n",
       "1     16\n",
       "5     16\n",
       "10    14\n",
       "19    13\n",
       "4     10\n",
       "32     8\n",
       "12     7\n",
       "13     7\n",
       "21     7\n",
       "18     6\n",
       "15     6\n",
       "16     6\n",
       "44     6\n",
       "28     5\n",
       "22     5\n",
       "2      5\n",
       "31     5\n",
       "23     4\n",
       "24     4\n",
       "25     4\n",
       "20     3\n",
       "56     3\n",
       "43     3\n",
       "71     2\n",
       "54     2\n",
       "64     2\n",
       "62     2\n",
       "58     2\n",
       "57     2\n",
       "7      2\n",
       "8      2\n",
       "55     2\n",
       "50     2\n",
       "11     2\n",
       "30     2\n",
       "46     2\n",
       "45     2\n",
       "42     2\n",
       "39     2\n",
       "37     2\n",
       "34     2\n",
       "33     2\n",
       "81     2\n",
       "Name: top genre, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Drop all genres with only one instance. Synthetic Minority Over-sampling Technique (SMOTE) has issues handling classes with only one instance\n",
    "counts = train_data['top genre'].value_counts()\n",
    "rtrain_data = train_data[~train_data['top genre'].isin(counts[counts < 2].index)]\n",
    "rtrain_data['top genre'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>title</th>\n",
       "      <th>artist</th>\n",
       "      <th>year</th>\n",
       "      <th>bpm</th>\n",
       "      <th>nrgy</th>\n",
       "      <th>dnce</th>\n",
       "      <th>dB</th>\n",
       "      <th>live</th>\n",
       "      <th>val</th>\n",
       "      <th>dur</th>\n",
       "      <th>acous</th>\n",
       "      <th>spch</th>\n",
       "      <th>pop</th>\n",
       "      <th>top genre</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>My Happiness</td>\n",
       "      <td>Connie Francis</td>\n",
       "      <td>1996</td>\n",
       "      <td>107</td>\n",
       "      <td>31</td>\n",
       "      <td>45</td>\n",
       "      <td>-8</td>\n",
       "      <td>13</td>\n",
       "      <td>28</td>\n",
       "      <td>150</td>\n",
       "      <td>75</td>\n",
       "      <td>3</td>\n",
       "      <td>44</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>How Deep Is Your Love</td>\n",
       "      <td>Bee Gees</td>\n",
       "      <td>1979</td>\n",
       "      <td>105</td>\n",
       "      <td>36</td>\n",
       "      <td>63</td>\n",
       "      <td>-9</td>\n",
       "      <td>13</td>\n",
       "      <td>67</td>\n",
       "      <td>245</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>Woman in Love</td>\n",
       "      <td>Barbra Streisand</td>\n",
       "      <td>1980</td>\n",
       "      <td>170</td>\n",
       "      <td>28</td>\n",
       "      <td>47</td>\n",
       "      <td>-16</td>\n",
       "      <td>13</td>\n",
       "      <td>33</td>\n",
       "      <td>232</td>\n",
       "      <td>25</td>\n",
       "      <td>3</td>\n",
       "      <td>67</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>Goodbye Yellow Brick Road - Remastered 2014</td>\n",
       "      <td>Elton John</td>\n",
       "      <td>1973</td>\n",
       "      <td>121</td>\n",
       "      <td>47</td>\n",
       "      <td>56</td>\n",
       "      <td>-8</td>\n",
       "      <td>15</td>\n",
       "      <td>40</td>\n",
       "      <td>193</td>\n",
       "      <td>45</td>\n",
       "      <td>3</td>\n",
       "      <td>63</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>Grenade</td>\n",
       "      <td>Bruno Mars</td>\n",
       "      <td>2010</td>\n",
       "      <td>110</td>\n",
       "      <td>56</td>\n",
       "      <td>71</td>\n",
       "      <td>-7</td>\n",
       "      <td>12</td>\n",
       "      <td>23</td>\n",
       "      <td>223</td>\n",
       "      <td>15</td>\n",
       "      <td>6</td>\n",
       "      <td>74</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>448</td>\n",
       "      <td>449</td>\n",
       "      <td>But Not For Me</td>\n",
       "      <td>Ella Fitzgerald</td>\n",
       "      <td>1959</td>\n",
       "      <td>80</td>\n",
       "      <td>22</td>\n",
       "      <td>18</td>\n",
       "      <td>-17</td>\n",
       "      <td>10</td>\n",
       "      <td>16</td>\n",
       "      <td>214</td>\n",
       "      <td>92</td>\n",
       "      <td>4</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>449</td>\n",
       "      <td>450</td>\n",
       "      <td>Surf City</td>\n",
       "      <td>Jan &amp; Dean</td>\n",
       "      <td>2010</td>\n",
       "      <td>148</td>\n",
       "      <td>81</td>\n",
       "      <td>53</td>\n",
       "      <td>-13</td>\n",
       "      <td>23</td>\n",
       "      <td>96</td>\n",
       "      <td>147</td>\n",
       "      <td>50</td>\n",
       "      <td>3</td>\n",
       "      <td>50</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>450</td>\n",
       "      <td>451</td>\n",
       "      <td>Dilemma</td>\n",
       "      <td>Nelly</td>\n",
       "      <td>2002</td>\n",
       "      <td>168</td>\n",
       "      <td>55</td>\n",
       "      <td>73</td>\n",
       "      <td>-8</td>\n",
       "      <td>20</td>\n",
       "      <td>61</td>\n",
       "      <td>289</td>\n",
       "      <td>23</td>\n",
       "      <td>14</td>\n",
       "      <td>77</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>451</td>\n",
       "      <td>452</td>\n",
       "      <td>It's Gonna Be Me</td>\n",
       "      <td>*NSYNC</td>\n",
       "      <td>2000</td>\n",
       "      <td>165</td>\n",
       "      <td>87</td>\n",
       "      <td>64</td>\n",
       "      <td>-5</td>\n",
       "      <td>6</td>\n",
       "      <td>88</td>\n",
       "      <td>191</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>62</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>452</td>\n",
       "      <td>453</td>\n",
       "      <td>In The Army Now</td>\n",
       "      <td>Status Quo</td>\n",
       "      <td>2002</td>\n",
       "      <td>105</td>\n",
       "      <td>73</td>\n",
       "      <td>68</td>\n",
       "      <td>-8</td>\n",
       "      <td>14</td>\n",
       "      <td>94</td>\n",
       "      <td>281</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>59</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>398 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Id                                        title            artist  year  \\\n",
       "0      1                                 My Happiness    Connie Francis  1996   \n",
       "2      3                        How Deep Is Your Love          Bee Gees  1979   \n",
       "3      4                                Woman in Love  Barbra Streisand  1980   \n",
       "4      5  Goodbye Yellow Brick Road - Remastered 2014        Elton John  1973   \n",
       "5      6                                      Grenade        Bruno Mars  2010   \n",
       "..   ...                                          ...               ...   ...   \n",
       "448  449                               But Not For Me   Ella Fitzgerald  1959   \n",
       "449  450                                    Surf City        Jan & Dean  2010   \n",
       "450  451                                      Dilemma             Nelly  2002   \n",
       "451  452                             It's Gonna Be Me            *NSYNC  2000   \n",
       "452  453                              In The Army Now        Status Quo  2002   \n",
       "\n",
       "     bpm  nrgy  dnce  dB  live  val  dur  acous  spch  pop  top genre  \n",
       "0    107    31    45  -8    13   28  150     75     3   44          0  \n",
       "2    105    36    63  -9    13   67  245     11     3   77          0  \n",
       "3    170    28    47 -16    13   33  232     25     3   67          0  \n",
       "4    121    47    56  -8    15   40  193     45     3   63          1  \n",
       "5    110    56    71  -7    12   23  223     15     6   74          2  \n",
       "..   ...   ...   ...  ..   ...  ...  ...    ...   ...  ...        ...  \n",
       "448   80    22    18 -17    10   16  214     92     4   45          0  \n",
       "449  148    81    53 -13    23   96  147     50     3   50          5  \n",
       "450  168    55    73  -8    20   61  289     23    14   77          9  \n",
       "451  165    87    64  -5     6   88  191      5     8   62          4  \n",
       "452  105    73    68  -8    14   94  281     11     2   59          3  \n",
       "\n",
       "[398 rows x 15 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#reduced dataframe with genres that have 2 or more instances\n",
    "rtrain_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The independent features set: \n",
      "[[107  31  45  -8  13  28 150  75   3  44]\n",
      " [105  36  63  -9  13  67 245  11   3  77]\n",
      " [170  28  47 -16  13  33 232  25   3  67]\n",
      " [121  47  56  -8  15  40 193  45   3  63]\n",
      " [110  56  71  -7  12  23 223  15   6  74]]\n",
      "The dependent variable: \n",
      "[0 0 0 1 2]\n"
     ]
    }
   ],
   "source": [
    "#Extracting features and Target\n",
    "#Splitting the data into independent and dependent variables\n",
    "X = rtrain_data.iloc[:, 4:14].values\n",
    "Y = rtrain_data.iloc[:, 14].values\n",
    "print('The independent features set: ')\n",
    "print(X[:5,:])\n",
    "print('The dependent variable: ')\n",
    "print(Y[:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(398, 398)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(X), len(Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{0: 68, 1: 16, 2: 5, 3: 66, 4: 10, 5: 16, 7: 2, 8: 2, 9: 61, 10: 14, 11: 2, 12: 7, 13: 7, 15: 6, 16: 6, 18: 6, 19: 13, 20: 3, 21: 7, 22: 5, 23: 4, 24: 4, 25: 4, 28: 5, 30: 2, 31: 5, 32: 8, 33: 2, 34: 2, 37: 2, 39: 2, 42: 2, 43: 3, 44: 6, 45: 2, 46: 2, 50: 2, 54: 2, 55: 2, 56: 3, 57: 2, 58: 2, 62: 2, 64: 2, 71: 2, 81: 2}\n"
     ]
    }
   ],
   "source": [
    "gen_dict ={}\n",
    "for gen in rtrain_data['top genre']:\n",
    "    if gen not in gen_dict:\n",
    "        gen_dict[gen] = 1\n",
    "    else:\n",
    "        gen_dict[gen] += 1\n",
    "print(gen_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{0: 68, 1: 20, 2: 9, 3: 66, 4: 14, 5: 20, 7: 6, 8: 6, 9: 61, 10: 18, 11: 6, 12: 11, 13: 11, 15: 10, 16: 10, 18: 10, 19: 17, 20: 7, 21: 11, 22: 9, 23: 8, 24: 8, 25: 8, 28: 9, 30: 6, 31: 9, 32: 12, 33: 6, 34: 6, 37: 6, 39: 6, 42: 6, 43: 7, 44: 10, 45: 6, 46: 6, 50: 6, 54: 6, 55: 6, 56: 7, 57: 6, 58: 6, 62: 6, 64: 6, 71: 6, 81: 6}\n"
     ]
    }
   ],
   "source": [
    "#create sampling strategy dict. This dictionary adds 4 sythentic duplicates to each class with less than 60 instances.\n",
    "#Reason for choosing 4 is because after experimenting with values, adding 4 instances gave me the best results\n",
    "#the dataset is still relatively imablanced but there is slight improvement.\n",
    "for key, value in gen_dict.items():\n",
    "    if value < 60:\n",
    "        gen_dict[key] += 4\n",
    "print(gen_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#improving the balance of the dataset using SMOTE.\n",
    "from imblearn.over_sampling import SMOTE\n",
    "sm = SMOTE(random_state = 42, k_neighbors = 1, sampling_strategy = gen_dict )\n",
    "x_train_res, y_train_res = sm.fit_sample(X, Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(570, 570)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(x_train_res), len(y_train_res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating the Training and Test set from data\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(x_train_res, y_train_res, test_size = 0.10, random_state = 42, stratify = y_train_res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "513"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Counter({0: 61, 3: 59, 9: 55, 5: 18, 1: 18, 10: 16, 19: 15, 4: 13, 32: 11, 21: 10, 13: 10, 12: 10, 15: 9, 16: 9, 18: 9, 44: 9, 31: 8, 28: 8, 2: 8, 22: 8, 25: 7, 23: 7, 24: 7, 20: 6, 8: 6, 34: 6, 7: 6, 55: 6, 30: 6, 42: 6, 43: 6, 81: 6, 56: 6, 33: 6, 50: 6, 58: 6, 11: 5, 71: 5, 45: 5, 39: 5, 46: 5, 64: 5, 62: 5, 57: 5, 54: 5, 37: 5})\n"
     ]
    }
   ],
   "source": [
    "import collections\n",
    "print(collections.Counter(Y_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "46"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(collections.Counter(Y_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'n_estimators': [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95], 'max_depth': [2, 4, 6, 8, 10, 12, 14, None], 'criterion': ['gini', 'entropy'], 'max_features': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}\n"
     ]
    }
   ],
   "source": [
    "#Here we have selected several parameters we would like to tune to get optimal values in each that improve our model\n",
    "#parameters = {\"n_estimators\":num_est, \"max_depth\": max_dep, \"criterion\": crit, \"max_features\": max_feat}\n",
    "rfc = RandomForestClassifier(random_state = 42)\n",
    "num_est = []\n",
    "max_dep = []\n",
    "crit = ['gini', 'entropy']\n",
    "max_feat = []\n",
    "for i in range(5, 100, 5):\n",
    "    num_est.append(i)\n",
    "for l in range(2, 16, 2):\n",
    "    max_dep.append(l)\n",
    "max_dep.append(None)\n",
    "for f in range(1, 11, 1):\n",
    "    max_feat.append(f)\n",
    "parameters = {\n",
    "    \"n_estimators\":num_est,\n",
    "    \"max_depth\": max_dep,\n",
    "    \"criterion\": crit,\n",
    "    \"max_features\": max_feat\n",
    "    \n",
    "}\n",
    "print(parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=3, error_score=nan,\n",
       "             estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,\n",
       "                                              class_weight=None,\n",
       "                                              criterion='gini', max_depth=None,\n",
       "                                              max_features='auto',\n",
       "                                              max_leaf_nodes=None,\n",
       "                                              max_samples=None,\n",
       "                                              min_impurity_decrease=0.0,\n",
       "                                              min_impurity_split=None,\n",
       "                                              min_samples_leaf=1,\n",
       "                                              min_samples_split=2,\n",
       "                                              min_weight_fraction_leaf=0.0,\n",
       "                                              n_estimators=100, n_jobs=None,\n",
       "                                              oob_score=False, random_state=42,\n",
       "                                              verbose=0, warm_start=False),\n",
       "             iid='deprecated', n_jobs=None,\n",
       "             param_grid={'criterion': ['gini', 'entropy'],\n",
       "                         'max_depth': [2, 4, 6, 8, 10, 12, 14, None],\n",
       "                         'max_features': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n",
       "                         'n_estimators': [5, 10, 15, 20, 25, 30, 35, 40, 45, 50,\n",
       "                                          55, 60, 65, 70, 75, 80, 85, 90, 95]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Here we use GridSearch to hypertune our parameters to get optimal values. Gridsearch iterates through all the values\n",
    "#set for each parameter and returns the best ones\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "cv = GridSearchCV(rfc,parameters,cv = 3)\n",
    "cv.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Function used to print out different parameter combinations and their scores\n",
    "def display(results):\n",
    "    print(f'Best parameters are: {results.best_params_}')\n",
    "    print(\"\\n\")\n",
    "    mean_score = results.cv_results_['mean_test_score']\n",
    "    std_score = results.cv_results_['std_test_score']\n",
    "    params = results.cv_results_['params']\n",
    "    for mean,std,params in zip(mean_score, std_score, params):\n",
    "        if round(mean,3) >= 0.57:\n",
    "            print(f'{round(mean,3)} + or -{round(std,3)} for the {params}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters are: {'criterion': 'entropy', 'max_depth': 14, 'max_features': 3, 'n_estimators': 80}\n",
      "\n",
      "\n",
      "0.571 + or -0.044 for the {'criterion': 'entropy', 'max_depth': 14, 'max_features': 3, 'n_estimators': 80}\n",
      "0.571 + or -0.044 for the {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'n_estimators': 80}\n"
     ]
    }
   ],
   "source": [
    "display(cv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
       "                       criterion='entropy', max_depth=14, max_features=3,\n",
       "                       max_leaf_nodes=None, max_samples=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, n_estimators=80,\n",
       "                       n_jobs=None, oob_score=False, random_state=42, verbose=0,\n",
       "                       warm_start=False)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Train and fit our model using the recommended values for our parameters\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "ranfor = RandomForestClassifier(n_estimators = 80, random_state = 42, criterion = 'entropy', max_features = 3, max_depth = 14)\n",
    "ranfor.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted genres      adult standards  album rock  alternative metal  \\\n",
      "Actual genres                                                          \n",
      "adult standards                     3           4                  0   \n",
      "album rock                          0           5                  0   \n",
      "alternative metal                   0           0                  1   \n",
      "art rock                            1           0                  0   \n",
      "atl hip hop                         0           0                  0   \n",
      "barbadian pop                       0           0                  0   \n",
      "bebop                               0           0                  0   \n",
      "blues rock                          0           0                  0   \n",
      "boy band                            0           0                  0   \n",
      "brill building pop                  1           0                  0   \n",
      "british folk                        0           0                  0   \n",
      "british invasion                    0           1                  0   \n",
      "british soul                        0           0                  0   \n",
      "bubblegum dance                     0           0                  0   \n",
      "chanson                             0           0                  0   \n",
      "chicago soul                        0           1                  0   \n",
      "classic rock                        0           0                  0   \n",
      "classic soul                        1           0                  0   \n",
      "classic uk pop                      0           0                  0   \n",
      "dance pop                           1           0                  0   \n",
      "dance rock                          0           0                  0   \n",
      "deep adult standards                0           0                  0   \n",
      "detroit hip hop                     0           0                  0   \n",
      "disco                               0           0                  0   \n",
      "disco house                         0           0                  0   \n",
      "doo-wop                             1           0                  0   \n",
      "east coast hip hop                  0           0                  0   \n",
      "eurodance                           0           0                  0   \n",
      "europop                             1           0                  0   \n",
      "g funk                              0           0                  0   \n",
      "glam metal                          0           0                  0   \n",
      "glam rock                           1           0                  0   \n",
      "new wave pop                        0           1                  0   \n",
      "permanent wave                      0           0                  0   \n",
      "pop                                 0           0                  0   \n",
      "soft rock                           0           1                  0   \n",
      "\n",
      "Predicted genres      art rock  bebop  blues rock  boy band  \\\n",
      "Actual genres                                                 \n",
      "adult standards              0      0           0         0   \n",
      "album rock                   1      0           0         0   \n",
      "alternative metal            0      0           0         0   \n",
      "art rock                     0      0           0         0   \n",
      "atl hip hop                  0      0           0         0   \n",
      "barbadian pop                0      0           0         0   \n",
      "bebop                        0      1           0         0   \n",
      "blues rock                   0      0           1         0   \n",
      "boy band                     0      0           0         1   \n",
      "brill building pop           0      0           0         0   \n",
      "british folk                 0      0           0         0   \n",
      "british invasion             0      0           0         0   \n",
      "british soul                 0      0           0         0   \n",
      "bubblegum dance              0      0           0         0   \n",
      "chanson                      0      0           0         0   \n",
      "chicago soul                 0      0           0         0   \n",
      "classic rock                 0      0           0         0   \n",
      "classic soul                 0      0           0         0   \n",
      "classic uk pop               0      0           0         0   \n",
      "dance pop                    0      0           0         0   \n",
      "dance rock                   0      0           0         0   \n",
      "deep adult standards         0      0           0         0   \n",
      "detroit hip hop              0      0           0         0   \n",
      "disco                        0      0           0         0   \n",
      "disco house                  0      0           0         0   \n",
      "doo-wop                      0      0           0         0   \n",
      "east coast hip hop           0      0           0         0   \n",
      "eurodance                    0      0           0         0   \n",
      "europop                      0      0           0         0   \n",
      "g funk                       0      0           0         0   \n",
      "glam metal                   0      0           0         0   \n",
      "glam rock                    0      0           0         0   \n",
      "new wave pop                 0      0           0         0   \n",
      "permanent wave               0      0           0         0   \n",
      "pop                          0      0           0         0   \n",
      "soft rock                    0      0           0         0   \n",
      "\n",
      "Predicted genres      brill building pop  british soul  bubblegum dance  ...  \\\n",
      "Actual genres                                                            ...   \n",
      "adult standards                        0             0                0  ...   \n",
      "album rock                             0             0                0  ...   \n",
      "alternative metal                      0             0                0  ...   \n",
      "art rock                               0             0                0  ...   \n",
      "atl hip hop                            0             0                0  ...   \n",
      "barbadian pop                          0             0                0  ...   \n",
      "bebop                                  0             0                0  ...   \n",
      "blues rock                             0             0                0  ...   \n",
      "boy band                               0             0                0  ...   \n",
      "brill building pop                     1             0                0  ...   \n",
      "british folk                           0             0                0  ...   \n",
      "british invasion                       0             0                0  ...   \n",
      "british soul                           0             1                0  ...   \n",
      "bubblegum dance                        0             0                1  ...   \n",
      "chanson                                0             0                0  ...   \n",
      "chicago soul                           0             0                0  ...   \n",
      "classic rock                           0             0                0  ...   \n",
      "classic soul                           0             0                0  ...   \n",
      "classic uk pop                         0             0                0  ...   \n",
      "dance pop                              0             0                0  ...   \n",
      "dance rock                             0             0                0  ...   \n",
      "deep adult standards                   0             0                0  ...   \n",
      "detroit hip hop                        0             0                0  ...   \n",
      "disco                                  0             0                0  ...   \n",
      "disco house                            0             0                0  ...   \n",
      "doo-wop                                0             0                0  ...   \n",
      "east coast hip hop                     0             0                0  ...   \n",
      "eurodance                              0             0                0  ...   \n",
      "europop                                0             0                0  ...   \n",
      "g funk                                 0             0                0  ...   \n",
      "glam metal                             0             0                0  ...   \n",
      "glam rock                              0             0                0  ...   \n",
      "new wave pop                           0             0                0  ...   \n",
      "permanent wave                         0             0                0  ...   \n",
      "pop                                    0             0                0  ...   \n",
      "soft rock                              0             0                0  ...   \n",
      "\n",
      "Predicted genres      dance rock  deep adult standards  detroit hip hop  \\\n",
      "Actual genres                                                             \n",
      "adult standards                0                     0                0   \n",
      "album rock                     0                     0                0   \n",
      "alternative metal              0                     0                0   \n",
      "art rock                       0                     0                0   \n",
      "atl hip hop                    0                     0                0   \n",
      "barbadian pop                  0                     0                0   \n",
      "bebop                          0                     0                0   \n",
      "blues rock                     0                     0                0   \n",
      "boy band                       0                     0                0   \n",
      "brill building pop             0                     0                0   \n",
      "british folk                   0                     0                0   \n",
      "british invasion               0                     0                0   \n",
      "british soul                   0                     0                0   \n",
      "bubblegum dance                0                     0                0   \n",
      "chanson                        0                     0                0   \n",
      "chicago soul                   0                     0                0   \n",
      "classic rock                   0                     0                0   \n",
      "classic soul                   0                     0                0   \n",
      "classic uk pop                 0                     0                0   \n",
      "dance pop                      0                     0                0   \n",
      "dance rock                     1                     0                0   \n",
      "deep adult standards           0                     1                0   \n",
      "detroit hip hop                0                     0                1   \n",
      "disco                          0                     0                0   \n",
      "disco house                    0                     0                0   \n",
      "doo-wop                        0                     0                0   \n",
      "east coast hip hop             0                     0                0   \n",
      "eurodance                      0                     0                0   \n",
      "europop                        0                     0                0   \n",
      "g funk                         0                     0                0   \n",
      "glam metal                     0                     0                0   \n",
      "glam rock                      0                     0                0   \n",
      "new wave pop                   0                     0                0   \n",
      "permanent wave                 0                     0                0   \n",
      "pop                            0                     0                0   \n",
      "soft rock                      0                     0                0   \n",
      "\n",
      "Predicted genres      disco  east coast hip hop  eurodance  europop  g funk  \\\n",
      "Actual genres                                                                 \n",
      "adult standards           0                   0          0        0       0   \n",
      "album rock                0                   0          0        0       0   \n",
      "alternative metal         0                   0          0        0       0   \n",
      "art rock                  0                   0          0        0       0   \n",
      "atl hip hop               0                   0          0        0       0   \n",
      "barbadian pop             0                   0          0        0       0   \n",
      "bebop                     0                   0          0        0       0   \n",
      "blues rock                0                   0          0        0       0   \n",
      "boy band                  0                   0          0        0       0   \n",
      "brill building pop        0                   0          0        0       0   \n",
      "british folk              0                   0          0        0       0   \n",
      "british invasion          0                   0          0        0       0   \n",
      "british soul              0                   0          0        0       0   \n",
      "bubblegum dance           0                   0          0        0       0   \n",
      "chanson                   0                   0          0        0       0   \n",
      "chicago soul              0                   0          0        0       0   \n",
      "classic rock              0                   0          0        0       0   \n",
      "classic soul              0                   0          0        0       0   \n",
      "classic uk pop            0                   0          0        0       0   \n",
      "dance pop                 0                   0          0        0       0   \n",
      "dance rock                0                   0          0        0       0   \n",
      "deep adult standards      0                   0          0        0       0   \n",
      "detroit hip hop           0                   0          0        0       0   \n",
      "disco                     1                   0          0        0       0   \n",
      "disco house               0                   0          0        0       0   \n",
      "doo-wop                   0                   0          0        0       0   \n",
      "east coast hip hop        0                   1          0        0       0   \n",
      "eurodance                 0                   0          1        0       0   \n",
      "europop                   0                   0          0        1       0   \n",
      "g funk                    0                   0          0        0       1   \n",
      "glam metal                0                   0          0        1       0   \n",
      "glam rock                 0                   0          0        0       0   \n",
      "new wave pop              0                   0          0        0       0   \n",
      "permanent wave            0                   0          0        0       0   \n",
      "pop                       0                   0          0        0       0   \n",
      "soft rock                 0                   0          0        0       0   \n",
      "\n",
      "Predicted genres      glam rock  permanent wave  \n",
      "Actual genres                                    \n",
      "adult standards               0               0  \n",
      "album rock                    0               0  \n",
      "alternative metal             0               0  \n",
      "art rock                      0               0  \n",
      "atl hip hop                   0               0  \n",
      "barbadian pop                 0               0  \n",
      "bebop                         0               0  \n",
      "blues rock                    0               0  \n",
      "boy band                      0               0  \n",
      "brill building pop            0               0  \n",
      "british folk                  1               0  \n",
      "british invasion              0               0  \n",
      "british soul                  0               0  \n",
      "bubblegum dance               0               0  \n",
      "chanson                       0               0  \n",
      "chicago soul                  0               0  \n",
      "classic rock                  0               0  \n",
      "classic soul                  0               0  \n",
      "classic uk pop                0               0  \n",
      "dance pop                     0               0  \n",
      "dance rock                    0               0  \n",
      "deep adult standards          0               0  \n",
      "detroit hip hop               0               0  \n",
      "disco                         0               0  \n",
      "disco house                   0               0  \n",
      "doo-wop                       0               0  \n",
      "east coast hip hop            0               0  \n",
      "eurodance                     0               0  \n",
      "europop                       0               0  \n",
      "g funk                        0               0  \n",
      "glam metal                    0               0  \n",
      "glam rock                     1               0  \n",
      "new wave pop                  0               0  \n",
      "permanent wave                0               1  \n",
      "pop                           0               0  \n",
      "soft rock                     0               0  \n",
      "\n",
      "[36 rows x 24 columns]\n"
     ]
    }
   ],
   "source": [
    "#evaluation\n",
    "Y_pred = ranfor.predict(X_test)\n",
    "#Reverse factorize\n",
    "reversefactor = dict(zip(range(86),definitions))\n",
    "Y_test = np.vectorize(reversefactor.get)(Y_test)\n",
    "Y_pred = np.vectorize(reversefactor.get)(Y_pred)\n",
    "# Making the Confusion Matrix\n",
    "print(pd.crosstab(Y_test, Y_pred, rownames=['Actual genres'], colnames=['Predicted genres']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                      precision    recall  f1-score   support\n",
      "\n",
      "     adult standards       0.30      0.43      0.35         7\n",
      "          album rock       0.38      0.71      0.50         7\n",
      "   alternative metal       1.00      1.00      1.00         1\n",
      "            art rock       0.00      0.00      0.00         1\n",
      "         atl hip hop       0.00      0.00      0.00         1\n",
      "       barbadian pop       0.00      0.00      0.00         1\n",
      "               bebop       1.00      1.00      1.00         1\n",
      "          blues rock       1.00      1.00      1.00         1\n",
      "            boy band       1.00      1.00      1.00         1\n",
      "  brill building pop       1.00      0.50      0.67         2\n",
      "        british folk       0.00      0.00      0.00         1\n",
      "    british invasion       0.00      0.00      0.00         1\n",
      "        british soul       1.00      1.00      1.00         1\n",
      "     bubblegum dance       1.00      1.00      1.00         1\n",
      "             chanson       1.00      1.00      1.00         1\n",
      "        chicago soul       0.00      0.00      0.00         1\n",
      "        classic rock       1.00      1.00      1.00         1\n",
      "        classic soul       0.00      0.00      0.00         1\n",
      "      classic uk pop       1.00      1.00      1.00         1\n",
      "           dance pop       0.45      0.83      0.59         6\n",
      "          dance rock       1.00      0.50      0.67         2\n",
      "deep adult standards       1.00      1.00      1.00         1\n",
      "     detroit hip hop       1.00      1.00      1.00         1\n",
      "               disco       1.00      1.00      1.00         1\n",
      "         disco house       0.00      0.00      0.00         1\n",
      "             doo-wop       0.00      0.00      0.00         1\n",
      "  east coast hip hop       1.00      1.00      1.00         1\n",
      "           eurodance       1.00      1.00      1.00         1\n",
      "             europop       0.50      0.50      0.50         2\n",
      "              g funk       1.00      1.00      1.00         1\n",
      "          glam metal       0.00      0.00      0.00         1\n",
      "           glam rock       0.50      0.50      0.50         2\n",
      "        new wave pop       0.00      0.00      0.00         1\n",
      "      permanent wave       1.00      1.00      1.00         1\n",
      "                 pop       0.00      0.00      0.00         1\n",
      "           soft rock       0.00      0.00      0.00         1\n",
      "\n",
      "            accuracy                           0.58        57\n",
      "           macro avg       0.56      0.55      0.55        57\n",
      "        weighted avg       0.52      0.58      0.53        57\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Inno Mvula\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "#print a classification report depicting the precision, recall, and f1-score of t=the different classes and overall model\n",
    "from sklearn.metrics import classification_report\n",
    "class_rep_forest = classification_report(Y_test, Y_pred)\n",
    "print(class_rep_forest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('bpm', 0.08981873811722724), ('nrgy', 0.10878154932831144), ('dnce', 0.10249459980229532), ('dB', 0.08968351884835), ('live', 0.07271296173982128), ('val', 0.0747656589218342), ('dur', 0.1529996730315351), ('acous', 0.10846830858945702), ('spch', 0.07813118007587419), ('pop', 0.12214381154529423)]\n"
     ]
    }
   ],
   "source": [
    "#Storing the trained model\n",
    "#We are going to observe the importance for each of the features and then store the Random Forest classifier using the joblib function of sklearn.\n",
    "print(list(zip(train_data.columns[4:14], ranfor.feature_importances_)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>title</th>\n",
       "      <th>artist</th>\n",
       "      <th>year</th>\n",
       "      <th>bpm</th>\n",
       "      <th>nrgy</th>\n",
       "      <th>dnce</th>\n",
       "      <th>dB</th>\n",
       "      <th>live</th>\n",
       "      <th>val</th>\n",
       "      <th>dur</th>\n",
       "      <th>acous</th>\n",
       "      <th>spch</th>\n",
       "      <th>pop</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>454</td>\n",
       "      <td>Pump It</td>\n",
       "      <td>The Black Eyed Peas</td>\n",
       "      <td>2005</td>\n",
       "      <td>154</td>\n",
       "      <td>93</td>\n",
       "      <td>65</td>\n",
       "      <td>-3</td>\n",
       "      <td>75</td>\n",
       "      <td>74</td>\n",
       "      <td>213</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>455</td>\n",
       "      <td>Circle of Life - From \"The Lion King\"/Soundtra...</td>\n",
       "      <td>Elton John</td>\n",
       "      <td>1994</td>\n",
       "      <td>161</td>\n",
       "      <td>39</td>\n",
       "      <td>30</td>\n",
       "      <td>-15</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "      <td>292</td>\n",
       "      <td>26</td>\n",
       "      <td>3</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>456</td>\n",
       "      <td>We Are The Champions - Remastered 2011</td>\n",
       "      <td>Queen</td>\n",
       "      <td>1977</td>\n",
       "      <td>64</td>\n",
       "      <td>46</td>\n",
       "      <td>27</td>\n",
       "      <td>-7</td>\n",
       "      <td>12</td>\n",
       "      <td>18</td>\n",
       "      <td>179</td>\n",
       "      <td>38</td>\n",
       "      <td>3</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>457</td>\n",
       "      <td>Insomnia - Radio Edit</td>\n",
       "      <td>Faithless</td>\n",
       "      <td>2010</td>\n",
       "      <td>127</td>\n",
       "      <td>92</td>\n",
       "      <td>71</td>\n",
       "      <td>-9</td>\n",
       "      <td>37</td>\n",
       "      <td>53</td>\n",
       "      <td>216</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>458</td>\n",
       "      <td>This Eve of Parting</td>\n",
       "      <td>John Hartford</td>\n",
       "      <td>2018</td>\n",
       "      <td>115</td>\n",
       "      <td>46</td>\n",
       "      <td>56</td>\n",
       "      <td>-12</td>\n",
       "      <td>21</td>\n",
       "      <td>34</td>\n",
       "      <td>153</td>\n",
       "      <td>18</td>\n",
       "      <td>3</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Id                                              title  \\\n",
       "0  454                                            Pump It   \n",
       "1  455  Circle of Life - From \"The Lion King\"/Soundtra...   \n",
       "2  456             We Are The Champions - Remastered 2011   \n",
       "3  457                              Insomnia - Radio Edit   \n",
       "4  458                                This Eve of Parting   \n",
       "\n",
       "                artist  year  bpm  nrgy  dnce  dB  live  val  dur  acous  \\\n",
       "0  The Black Eyed Peas  2005  154    93    65  -3    75   74  213      1   \n",
       "1           Elton John  1994  161    39    30 -15    11   14  292     26   \n",
       "2                Queen  1977   64    46    27  -7    12   18  179     38   \n",
       "3            Faithless  2010  127    92    71  -9    37   53  216      6   \n",
       "4        John Hartford  2018  115    46    56 -12    21   34  153     18   \n",
       "\n",
       "   spch  pop  \n",
       "0    18   72  \n",
       "1     3   59  \n",
       "2     3   76  \n",
       "3     4   50  \n",
       "4     3   44  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# predicting test data results\n",
    "test_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Extracting our features from the test data and predicting their genres\n",
    "X1 = test_data.iloc[:, 4:14].values\n",
    "reversefactor = dict(zip(range(86),definitions))\n",
    "test_data['top genre'] = ranfor.predict(X1)\n",
    "test_data['top genre'] = np.vectorize(reversefactor.get)(test_data['top genre'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>title</th>\n",
       "      <th>artist</th>\n",
       "      <th>year</th>\n",
       "      <th>bpm</th>\n",
       "      <th>nrgy</th>\n",
       "      <th>dnce</th>\n",
       "      <th>dB</th>\n",
       "      <th>live</th>\n",
       "      <th>val</th>\n",
       "      <th>dur</th>\n",
       "      <th>acous</th>\n",
       "      <th>spch</th>\n",
       "      <th>pop</th>\n",
       "      <th>top genre</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>454</td>\n",
       "      <td>Pump It</td>\n",
       "      <td>The Black Eyed Peas</td>\n",
       "      <td>2005</td>\n",
       "      <td>154</td>\n",
       "      <td>93</td>\n",
       "      <td>65</td>\n",
       "      <td>-3</td>\n",
       "      <td>75</td>\n",
       "      <td>74</td>\n",
       "      <td>213</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>72</td>\n",
       "      <td>alternative metal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>455</td>\n",
       "      <td>Circle of Life - From \"The Lion King\"/Soundtra...</td>\n",
       "      <td>Elton John</td>\n",
       "      <td>1994</td>\n",
       "      <td>161</td>\n",
       "      <td>39</td>\n",
       "      <td>30</td>\n",
       "      <td>-15</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "      <td>292</td>\n",
       "      <td>26</td>\n",
       "      <td>3</td>\n",
       "      <td>59</td>\n",
       "      <td>album rock</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>456</td>\n",
       "      <td>We Are The Champions - Remastered 2011</td>\n",
       "      <td>Queen</td>\n",
       "      <td>1977</td>\n",
       "      <td>64</td>\n",
       "      <td>46</td>\n",
       "      <td>27</td>\n",
       "      <td>-7</td>\n",
       "      <td>12</td>\n",
       "      <td>18</td>\n",
       "      <td>179</td>\n",
       "      <td>38</td>\n",
       "      <td>3</td>\n",
       "      <td>76</td>\n",
       "      <td>british invasion</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>457</td>\n",
       "      <td>Insomnia - Radio Edit</td>\n",
       "      <td>Faithless</td>\n",
       "      <td>2010</td>\n",
       "      <td>127</td>\n",
       "      <td>92</td>\n",
       "      <td>71</td>\n",
       "      <td>-9</td>\n",
       "      <td>37</td>\n",
       "      <td>53</td>\n",
       "      <td>216</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>50</td>\n",
       "      <td>dance pop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>458</td>\n",
       "      <td>This Eve of Parting</td>\n",
       "      <td>John Hartford</td>\n",
       "      <td>2018</td>\n",
       "      <td>115</td>\n",
       "      <td>46</td>\n",
       "      <td>56</td>\n",
       "      <td>-12</td>\n",
       "      <td>21</td>\n",
       "      <td>34</td>\n",
       "      <td>153</td>\n",
       "      <td>18</td>\n",
       "      <td>3</td>\n",
       "      <td>44</td>\n",
       "      <td>adult standards</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>459</td>\n",
       "      <td>You Keep Me Hangin On</td>\n",
       "      <td>Kim Wilde</td>\n",
       "      <td>1986</td>\n",
       "      <td>123</td>\n",
       "      <td>68</td>\n",
       "      <td>69</td>\n",
       "      <td>-12</td>\n",
       "      <td>14</td>\n",
       "      <td>71</td>\n",
       "      <td>255</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "      <td>album rock</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>460</td>\n",
       "      <td>Mandy</td>\n",
       "      <td>Barry Manilow</td>\n",
       "      <td>1974</td>\n",
       "      <td>104</td>\n",
       "      <td>46</td>\n",
       "      <td>31</td>\n",
       "      <td>-9</td>\n",
       "      <td>14</td>\n",
       "      <td>32</td>\n",
       "      <td>213</td>\n",
       "      <td>42</td>\n",
       "      <td>3</td>\n",
       "      <td>69</td>\n",
       "      <td>dance pop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>461</td>\n",
       "      <td>Collette</td>\n",
       "      <td>Billy Fury</td>\n",
       "      <td>1982</td>\n",
       "      <td>155</td>\n",
       "      <td>44</td>\n",
       "      <td>55</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td>73</td>\n",
       "      <td>112</td>\n",
       "      <td>82</td>\n",
       "      <td>4</td>\n",
       "      <td>27</td>\n",
       "      <td>deep adult standards</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>462</td>\n",
       "      <td>Against All Odds (Take a Look at Me Now) - 201...</td>\n",
       "      <td>Phil Collins</td>\n",
       "      <td>2016</td>\n",
       "      <td>116</td>\n",
       "      <td>50</td>\n",
       "      <td>58</td>\n",
       "      <td>-7</td>\n",
       "      <td>13</td>\n",
       "      <td>11</td>\n",
       "      <td>206</td>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "      <td>74</td>\n",
       "      <td>dance pop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>463</td>\n",
       "      <td>Highway to Hell</td>\n",
       "      <td>AC/DC</td>\n",
       "      <td>1979</td>\n",
       "      <td>116</td>\n",
       "      <td>91</td>\n",
       "      <td>57</td>\n",
       "      <td>-5</td>\n",
       "      <td>16</td>\n",
       "      <td>42</td>\n",
       "      <td>208</td>\n",
       "      <td>6</td>\n",
       "      <td>13</td>\n",
       "      <td>83</td>\n",
       "      <td>album rock</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Id                                              title  \\\n",
       "0  454                                            Pump It   \n",
       "1  455  Circle of Life - From \"The Lion King\"/Soundtra...   \n",
       "2  456             We Are The Champions - Remastered 2011   \n",
       "3  457                              Insomnia - Radio Edit   \n",
       "4  458                                This Eve of Parting   \n",
       "5  459                              You Keep Me Hangin On   \n",
       "6  460                                              Mandy   \n",
       "7  461                                           Collette   \n",
       "8  462  Against All Odds (Take a Look at Me Now) - 201...   \n",
       "9  463                                    Highway to Hell   \n",
       "\n",
       "                artist  year  bpm  nrgy  dnce  dB  live  val  dur  acous  \\\n",
       "0  The Black Eyed Peas  2005  154    93    65  -3    75   74  213      1   \n",
       "1           Elton John  1994  161    39    30 -15    11   14  292     26   \n",
       "2                Queen  1977   64    46    27  -7    12   18  179     38   \n",
       "3            Faithless  2010  127    92    71  -9    37   53  216      6   \n",
       "4        John Hartford  2018  115    46    56 -12    21   34  153     18   \n",
       "5            Kim Wilde  1986  123    68    69 -12    14   71  255      8   \n",
       "6        Barry Manilow  1974  104    46    31  -9    14   32  213     42   \n",
       "7           Billy Fury  1982  155    44    55 -10    10   73  112     82   \n",
       "8         Phil Collins  2016  116    50    58  -7    13   11  206     20   \n",
       "9                AC/DC  1979  116    91    57  -5    16   42  208      6   \n",
       "\n",
       "   spch  pop             top genre  \n",
       "0    18   72     alternative metal  \n",
       "1     3   59            album rock  \n",
       "2     3   76      british invasion  \n",
       "3     4   50             dance pop  \n",
       "4     3   44       adult standards  \n",
       "5     3   60            album rock  \n",
       "6     3   69             dance pop  \n",
       "7     4   27  deep adult standards  \n",
       "8     3   74             dance pop  \n",
       "9    13   83            album rock  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "album rock              31\n",
       "adult standards         27\n",
       "dance pop               24\n",
       "glam rock                3\n",
       "new wave pop             3\n",
       "british invasion         3\n",
       "disco                    2\n",
       "atl hip hop              2\n",
       "glam metal               2\n",
       "deep adult standards     2\n",
       "boy band                 2\n",
       "bronx hip hop            1\n",
       "art pop                  1\n",
       "chicago soul             1\n",
       "disco house              1\n",
       "permanent wave           1\n",
       "brill building pop       1\n",
       "g funk                   1\n",
       "europop                  1\n",
       "bubblegum dance          1\n",
       "merseybeat               1\n",
       "alternative metal        1\n",
       "dance rock               1\n",
       "Name: top genre, dtype: int64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data['top genre'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>top genre</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>103</td>\n",
       "      <td>558</td>\n",
       "      <td>deep adult standards</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>104</td>\n",
       "      <td>559</td>\n",
       "      <td>dance pop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>105</td>\n",
       "      <td>560</td>\n",
       "      <td>europop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>106</td>\n",
       "      <td>561</td>\n",
       "      <td>new wave pop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>107</td>\n",
       "      <td>562</td>\n",
       "      <td>adult standards</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>108</td>\n",
       "      <td>563</td>\n",
       "      <td>dance pop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>109</td>\n",
       "      <td>564</td>\n",
       "      <td>dance pop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>110</td>\n",
       "      <td>565</td>\n",
       "      <td>dance pop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>111</td>\n",
       "      <td>566</td>\n",
       "      <td>dance pop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>112</td>\n",
       "      <td>567</td>\n",
       "      <td>glam metal</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Id             top genre\n",
       "103  558  deep adult standards\n",
       "104  559             dance pop\n",
       "105  560               europop\n",
       "106  561          new wave pop\n",
       "107  562       adult standards\n",
       "108  563             dance pop\n",
       "109  564             dance pop\n",
       "110  565             dance pop\n",
       "111  566             dance pop\n",
       "112  567            glam metal"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#saving predictions as a csv for submission on kaggle\n",
    "prediction = test_data[['Id', 'top genre']]\n",
    "prediction.to_csv(\"SamplingRF29_submission.csv\", index=False)\n",
    "prediction.tail(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
